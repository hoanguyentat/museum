<% let NULL_TIMES = global.myCustomVars.NULL_TIMES %>

<!DOCTYPE html>
<html>
	<head>
		<title><%= title %></title>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<!-- Font Awesome -->
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css">
		<!-- Ionicons -->
		<!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ionicons/2.0.1/css/ionicons.min.css"> -->
		<% include header %>
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"
	 integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ=="
	 crossorigin=""/>
		<style type="text/css">
			.lb, .ptitle, .tnrlb, .ite-bold {
				font-weight: bold;
			}
			.ite-italic {
				font-style: italic;
			}
			.ite-underline{
				text-decoration: underline;
			}
			.paracel-islands {
				color: white;
				font-size: 12px !important;
		    position: absolute;
		    width:1000px;
		    font-size:20px;
			}
			.fa-circle {
				font-size: 6px !important;
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
				<% if ((typeof(objectModelId) != 'undefined') && (typeof(objectPath) != 'undefined')) { %>
					<a class="btn btn-success" role="button" href="/">Trang chủ</a>
					<a class="btn btn-warning" role="button" href="<%= '/app/#!' + objectPath + '/chinh-sua/' + objectModelId %>">Chỉnh sửa</a>
					<button class="btn btn-danger" onclick="deleteSample('<%= objectPath %>', '<%= objectModelId %>')" role="button">Xóa</button>
					<a class="btn btn-primary" role="button" href="<%= '/app/#!/quan-ly-mau' + objectPath %>">Đến trang quản lý mẫu</a>
				<% } %>
			</div>
			<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
				<%
				// console.log("here");
				// console.log(staticPath);
				var sp = staticPath;
				// do not know why we need to declare this variable.
				// staticPath can not be accessed inside below functions
				function display(obj){
					// console.log(staticPath)
					// console.log(count)
					function extension(filename) {
						var idx = filename.lastIndexOf('.');
						if (idx >= 0){
							return filename.substring(idx + 1);
						}
						return 'nothing';
					}
					function mediaType(extension) {
						// console.log(extension)
						extension = extension.toLowerCase();
						var imgs = ["jpg", "jpeg", "gif", "png", "tif", "tiff", "raw", "bmp", "bpg", "eps"];
						var videos = ["mp4","mpg","flv","rm","webm","mkv","ogg","avi","mov","wmv","3gp","m4v"];
						if (imgs.indexOf(extension) >= 0){
							return 'image';
						}
						if (videos.indexOf(extension) >= 0){
							return 'video';
						}
						return 'document'
					}
					if (obj instanceof Array){

						var result =  obj.reduce(function (preStr, curElement){
							// console.log(curElement.split('_+_')[1]);
							if (curElement.length < 1){
								return preStr;
							}
							var ext = extension(curElement);
							switch (mediaType(ext)){
								case 'video':
									preStr += '<video width="160" height="120" controls> <source src="/content/download' + sp + '/' + curElement + '"></video>'
									break;
								case 'image':
									preStr += '<a target="new" href="' + sp + '/' + curElement + '?dim=full">' + '<img onerror="this.onerror=null;this.src=\'/img/image-not-found.png\';" class="img-responsive" width="160" src="' + sp + '/' + curElement + '?dim=full">' + '</a>' + `<a href="/content/download${sp}/${curElement}"><i class="fa fa-fw fa-cloud-download"></i></a>` + '<br/>\n';
									break;
								default:
									preStr += '<a href="/content/download' + sp + '/' + curElement + '">' + curElement.substring(curElement.lastIndexOf('_+_') + '_+_'.length) + '</a><br/>\n';
									break;
							}
							return preStr;
						}, '');
						return result;
					}
					else if (obj instanceof Date){
						if (NULL_TIMES.indexOf(obj.getTime()) >= 0) {
							return '';
						}
						let h = obj.getHours();
						if (h == 2) {
							return obj.getFullYear()
						}
						if (h == 1) {
							return [obj.getMonth() + 1, obj.getFullYear()].join(' / ')
						}
						return [obj.getDate(), obj.getMonth() + 1, obj.getFullYear()].join(' / ')
					}
					// Need to escape to prevent injected HTML + JS
					// return escape(obj).replace(/_-_/g, ', ');
					return (typeof obj == 'string') ? obj.replace(/_-_/g, ', ') : obj;
				}

				function propDiff (obj1, obj2, prop) {
					try {
						if ((prop in obj1) && !(prop in obj2)){
							return true;
						}

						if (!(prop in obj1) && (prop in obj2)){
							return true;
						}
						return diff(obj1[prop], obj2[prop]);
					}
					catch (e){
						console.log(e);
						return false;
					}

				}

				function diff (prop1, prop2) {

					// Problem here
					if (!prop1 && !prop2){
						return false;
					}
					if ((!prop1 && prop2) || (prop1 && !prop2)){
						return true;
					}
					// End
					
					if ((prop1 instanceof Array) && (prop2 instanceof Array)){
						if (prop1.length != prop2.length){
							return true;
						}
						for (var i = 0; i < prop1.length; i++) {
							if (prop2.indexOf(prop1[i]) < 0){
								return true;
							}
							var isDifferent = diff(prop1[i], prop2[i]);
							if (isDifferent){
								return true;
							}
						}
						return false;
					}
					if ((prop1 instanceof Date) && (prop2 instanceof Date)){
						return !(prop1 - prop2 == 0);
					}
					if ((typeof(prop1) == typeof(prop2)) && (typeof(prop1) == 'object')){
						if (Object.keys(prop1).length != Object.keys(prop2).length){
							return true;
						}
						var keys = Object.keys(prop1);
						for(var i = 0; i < keys; i++){
							var isDifferent = diff(prop1[keys[i]], prop2[keys[i]]);
							if (isDifferent){
								return true;
							}
						}
						return false;
					}
					if (((typeof(prop1) == typeof(prop2)) && (typeof(prop1) == 'string'))){
						return prop1.localeCompare(prop2)
					}
					return (prop1 !== prop2);
				}
				var diffs = [];
				var obj1 = obj1;
				var obj2 = obj2;
					if (count == 2){
						// console.log(count);
						for(var i in obj1){
							// console.log("processing " + i);
							if (propDiff(obj1, obj2, i)){
								// console.log("pushing " + i);
								diffs.push(i);
							}
						}
						// console.log("===")
						// console.log(count);
						// console.log(obj2);
						for(var i in obj2){
							if (diffs.indexOf(i) < 0){
								if (propDiff(obj1, obj2, i)){
									diffs.push(i);
								}
							}
							
						}
					}
					else {
						// console.log(Object.keys(obj1));
						diffs = Object.keys(obj1).filter(function (element) {
							if (obj1[element] instanceof Array){
								return (obj1[element].length > 0);
							}
							if (obj1[element] instanceof Date){
								return true;
							}
							if (obj1[element] instanceof Object){
								return Object.keys(obj1[element]).length > 0
							}
							return obj1[element] ? true : false;
						});
					}
					
				%>
				<table class="table table-hover">
					<thead>
						<tr>
							<th><strong>Thuộc tính</strong></th>
							<th>Giá trị</th>
							<% if (count == 2) { %>
								<th>Giá trị mới</th>
							<% } %>
						</tr>
					</thead>
					<tbody>
				<% for (var i = 0; i < diffs.length; i++){ %>
					<tr>
						<td><b><%= props[diffs[i]] %></b></td>
						<td><span class="text-info"><%- display(obj1[diffs[i]]) %></span></td>
						<% if (count == 2) { %>
								<td><span class="text-success"><%- display(obj2[diffs[i]]) %></span></td>
						<% } %>
						
					</tr>
				<% } %>
					</tbody>
				</table>
			</div>
			<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6 col-md-off-set-3 col-lg-offset-3">
				<div id="leafletdiv" style="height: 750px;">
				
				</div>
				<div id="images"></div>
				<div id="imgleaf"></div>
			</div>
		</div>
		
		<!-- Make sure you put this AFTER Leaflet's CSS -->
		<script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"
		integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log=="
		crossorigin=""></script>
		<!--Add mapbox.js -->
		<script src='https://api.tiles.mapbox.com/mapbox.js/v1.6.2/mapbox.js'></script>
		<link href='https://api.tiles.mapbox.com/mapbox.js/v1.6.2/mapbox.css' rel='stylesheet' />
		<script type="text/javascript" src='/javascripts/leaflet.browser.print.min.js'></script>
		<script type="text/javascript" src='/javascripts/leaflet.label.js'></script>
		<script src='//api.tiles.mapbox.com/mapbox.js/plugins/leaflet-image/v0.0.4/leaflet-image.js'></script>
		<!-- <script type="text/javascript" src="/javascripts/Leaflet.Icon.Glyph.js"></script> -->
		<!-- <script src='/javascripts/leaflet-color-markers11.js'></script> -->
		<script type="text/javascript" src="/javascripts/Map.SelectArea.min.js"></script>
		<script>
			function ob(x) {
				return document.getElementById(x)
			}
			var zoom = 6
			// var mymap = L.map('leafletdiv').setView([latitude, longitude], zoom);
			var mymap = L.map('leafletdiv', {selectArea: true}).setView([16.24261, 106.33832], zoom);
			L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
					attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
			}).addTo(mymap);
			mymap.on('areaselected', (e) => {
				console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat
			});
			L.control.layers({
					'Satellite Map': L.mapbox.tileLayer('bobbysud.map-l4i2m7nd', {
							detectRetina: true
					}).addTo(mymap),
					'Terrain Map': L.mapbox.tileLayer('bobbysud.i2pfp2lb', {
							detectRetina: true
					})
					// }).addTo(mymap)
			}).addTo(mymap);

			var coor = <%- JSON.stringify(coor) %>
			// console.log(coor);
			if (coor && (coor.length == 2)) {
				var marker = L.marker(coor).addTo(mymap);
			}
			<% if (typeof(coordinationArr) != 'undefined') { %>
				var c = <%- coordinationArr ? JSON.stringify(coordinationArr) : JSON.stringify([]) %>
				// console.log(c);
				var greenIcon = new L.Icon({
				  // iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
				  iconUrl: '/img/leaflet-markers/marker-icon-2x-green.png',
				  shadowUrl: '/img/leaflet-markers/marker-shadow.png',
				  iconSize: [25, 41],
				  iconAnchor: [12, 41],
				  popupAnchor: [1, -34],
				  shadowSize: [41, 41]
				});
				for(var i = 0; i < c.length; i++) {
					var marker = L.marker(c[i], {
						title: i,
						riseOnHover: true,
						// icon: L.icon.glyph({
						// 	prefix: 'fa',
						// 	glyph: 'fa-internet-explorer',
						// 	glyphColor: 'red',
						// })
						icon: greenIcon
					}).addTo(mymap);
				}
			<% } %>
		</script>
		<script>
			// 16.662980, 112.740780
			// inject Paracel Islands
			var blueIcon = new L.Icon({
			  // iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
			  iconUrl: '/img/leaflet-markers/marker-icon-2x-blue.png',
			  shadowUrl: '/img/leaflet-markers/marker-shadow.png',
			  iconSize: [25, 41],
			  iconAnchor: [12, 41],
			  popupAnchor: [1, -34],
			  shadowSize: [41, 41]
			});
			// var marker = L.marker([16.8406039,112.3101055], {
			var marker = L.marker([16.9772, 112.2676], {
				opacity: 0.01,
				title: 'Paracel Islands',
				riseOnHover: true,
				// icon: L.icon.glyph({
				// 	prefix: 'fa',
				// 	glyph: 'fa-internet-explorer',
				// 	glyphColor: 'red',
				// })
				icon: blueIcon
			})
			marker.bindLabel("<i class='fa fa-fw fa-circle'></i><b> Quần đảo<br> Hoàng Sa</b>", {noHide: true, className: "paracel-islands", offset: [0, 0] });
			// marker.bindLabel("Paracel Islands", {permanent: true, className: "paracel-islands", offset: [0, 0] });
			marker.addTo(mymap);


			// 10.758716, 115.809662
			// inject Spratly Islands
			blueIcon = new L.Icon({
			  // iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
			  iconUrl: '/img/leaflet-markers/marker-icon-2x-blue.png',
			  shadowUrl: '/img/leaflet-markers/marker-shadow.png',
			  iconSize: [25, 41],
			  iconAnchor: [12, 41],
			  popupAnchor: [1, -34],
			  shadowSize: [41, 41]
			});
			// var marker = L.marker([16.8406039,112.3101055], {
			var marker = L.marker([9.99969, 114.00431], {
				opacity: 0.01,
				title: 'Spratly Islands',
				riseOnHover: true,
				// icon: L.icon.glyph({
				// 	prefix: 'fa',
				// 	glyph: 'fa-internet-explorer',
				// 	glyphColor: 'red',
				// })
				icon: blueIcon
			})
			marker.bindLabel("<i class='fa fa-fw fa-circle'></i><b> Quần đảo<br> Trường Sa</b>", {noHide: true, className: "paracel-islands", offset: [0, 0] });
			// marker.bindLabel("Paracel Islands", {permanent: true, className: "paracel-islands", offset: [0, 0] });
			marker.addTo(mymap);
		</script>
		<script>
			// var map = L.map('imgleaf').setView([38.9, -77.03], 14)
			// L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
			//    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
			// }).addTo(mymap);
			// var d1 = new Date();
			// leafletImage(mymap, function(err, canvas) {
			// 	// now you have canvas
			// 	// example thing to do with that canvas:
			// 	var d2 = new Date();
			// 	console.log(d2.getTime() - d1.getTime(), ' miliseconds');
			// 	var img = document.createElement('img');
			// 	var dimensions = mymap.getSize();
			// 	img.width = dimensions.x;
			// 	img.height = dimensions.y;
			// 	img.src = canvas.toDataURL();
			// 	document.getElementById('images').innerHTML = '';
			// 	document.getElementById('images').appendChild(img);
			// });
			// L.browserPrint().addTo(mymap)
		</script>

		<script>
			function deleteSample(path, id) {
				if (!confirm('Bạn có chắc chắn muốn xóa mẫu dữ liệu này không?')) {
					return;
				}
				$.ajax({
					url: `/content${path}`,
					type: 'DELETE',
					data: {
						id: id
					},
					success: function (res) {
						alert('Đã xóa mẫu')
						console.log(res);
					},
					error: function (err) {
						if (err.responseJSON && err.responseJSON.error) {
							alert(err.responseJSON.error)
						} else {
							alert('Có lỗi xảy ra')
						}
						console.log(err);
					}
				})
			}
		</script>
		<script type='text/javascript' src='/javascripts/simplezoom.js'></script>
	</body>
</html>
